import UIKit

/*:
 # Memory Basics
 */
/*
 메모리에 대한 기초적인 내용을 공부합니다.

 - 비트와 바이트
 - 데이터 저장 방식
 - 메모리 주소
 - 메모리 공간 분류(스택과 힙)
 ====================================================
 [해당 강의 설명영상만 있음.]
 
 
 [강의 메모]
 - 메모리 공부하는 이유 : 코드 통해 처리하는 모든 데이터가 메모리에 저장
 - 구조, 종류, 저장방식
 
 1. 메모리
    - 0, 1 저장하는 반도체
    - 전압차이로 데이터 저장
 
    내용             단위     비고
 ====================================================
    - off 0, on 1   Bit     정보의 기본단위
 
    - 8bit          Byte    프로그래밍에서 기본단위 (+ : 0~255(256ea) / - : -128 ~ 127)
        - 1bit -> 패턴 2개 (0, 1)
        - 2bit -> 패턴 4개 (0, 0), (0, 1) ... (1, 1)
            -> 10진수 0부터 3까지 저장 가능
    
        ㄱ. (+ 22)
            00010110     -> Data Bit : 실제 데이터 저장하는 비트
            MSB     LSB
            
            - 양수저장시 모든 비트 데이터 비트로 사용
            - Sign Bit(부호비트) : 최상위 비트 0이면 양수, 1이면 음수로 인식
 
        ㄴ. (- 22)
            - 음수저장 방식 2's Complement(2의 보수 방식)
                - 양수값을 ~(bitwise not) 연산 -> 1더하여 음수 표현
            - 00010110
 
            - 11101001
                    +1
            ===========
              11101010
 
 2. 메모리의 크기단위
    - Bit -> Byte (8Bit) -> 이전단위의 * 1024배씩
    - 고유주소가 할당 : 메모리에는 1바이트 저장할 수 있는 공간마다
      해당 주소를 통해 CPU 메모리 접근
 
    - Memory Address Register(주소 레지스터) : CPU가 메모리 저장 및 접근위해 사용하는 것
      주소 레지스터의 크기 = CPU 비트수와 동일
 
      32bit -> 약 42억개       -> 4GB
      64bit -> 약 1800경개 가량 -> 16EB
       -> 운영체제 메모리 관리방식에 따라 더 작은 크기로 제한 됨
 
 운영체제 : 프로그램 실행할 때마다 프로그램 사용할 메모리 공간 할당 함
 사용 용도에 따른 4가지 분류
 1. Code : 기계어로 번역된 프로그램 코드
 2. Data : 정적변수, 전역변수 -> 프로그램 시작 시 생성, 프로그램 종료시 함께 제거됨
 
 3. Heap : 동적 할당데이터 저장, 공간크기 예측하기 어려움
    - 생성, 제거시점 정해져있지 않아 직접 코드로 생성 및 제거해야함
    - 사용 완료 후 미제거시 프로그램 종료까지 유지, 이런 메모리 많아지면 메모리 부족해짐
    - 메모리 누수 : 필요하지 않은 메모리 자동으로 해지되지 않는것
 
    - 메모리 관리
        ㄱ. Value Type     (값 형식)    : stack에 저장, 미사용시 자동 제거
        ㄴ. Reference Type (참조 형식)   : [실제값 Heap]*, *메모리 주소를 stack에 저장
                                        실제값 접근시 스택에있는 주소를 통해 접근
            -> *** 메모리 누수 방지 중요 (값 더이상 사용하지 않을 때 두공간 데이터 완전히 삭제통해) ***
 
 4. Stack : 지역변수, 파라미터, 리턴값 저장, 함수호출과 밀접한 관련
    - Stack Frame : 함수에서 호출한 모든값 저장하는 공간, 함수실행 종료되면 스택에서 자동 제거
      다른함수에서 메모리 자동으로 사용할 수 있음
 
    - LIFO(Last In First Out) 스택헤드 쌓아가는 방식으로 메모리 관리
 */
